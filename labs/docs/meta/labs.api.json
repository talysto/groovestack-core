{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.43.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@groovestack/labs!",
  "docComment": "",
  "name": "@groovestack/labs",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@groovestack/labs!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!AddressField:function(1)",
          "docComment": "/**\n * AddressField is a React Admin field that displays an address with a a variety of formatting options.\n *\n * FEATURES - source can be string or object - various formatting options: single line, multiline, etc -\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AddressField: ({ format, ...rest }: "
            },
            {
              "kind": "Reference",
              "text": "AddressFieldProps",
              "canonicalReference": "@groovestack/labs!~AddressFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/react-admin/address/AddressField/AddressField.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ format, ...rest }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "AddressField"
        },
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!AddressInput:function(1)",
          "docComment": "/**\n * AddressInput is a React Admin input that accepts free-form postal addresses as input It can be used to validate values, reformat them and supports autocomplete using the Google Places API (if enabled)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "AddressInput: (props: "
            },
            {
              "kind": "Reference",
              "text": "AddressInputProps",
              "canonicalReference": "@groovestack/labs!~AddressInputProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/react-admin/address/AddressInput/AddressInput.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "AddressInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!Carousel:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Carousel: ({ imgs }: "
            },
            {
              "kind": "Content",
              "text": "{\n    imgs: any[];\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/media/carousel/Carousel.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ imgs }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "Carousel"
        },
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!MoneyField:function(1)",
          "docComment": "/**\n * MoneyField is a React Admin field that formats a number as currency.\n *\n * FEATURES - Standard React Admin Field property interface - Amount may be numeric or string value - Currency specified by record or explicity via 'currencySource' prop - Locale can be specified for currency formatting. Defaults to browser locale. - Display a special value for zero amounts - Use sourceFormat='cents' to transform values that are provided in integer form (ie divide by 100 for USD)\n *\n * TODO - Specify sx overrides for negative values, ie red text or () instead of - negative sign - Crypto: Dynamic support if library found, Map unicode symbols for crypto and override, Allow specifying number of decimal places\n *\n * NOTES - Stripe API specifies amounts in cents for USD. This is a common pattern for financial APIs. Their docs include references to zero-decimal currencies like JPY, and three-decimal currencies like BHD. https://docs.stripe.com/currencies#zero-decimal\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MoneyField: ({ currencySource, roundWhole, displayWhenZero, sourceFormat, ...rest }: "
            },
            {
              "kind": "Reference",
              "text": "MoneyFieldProps",
              "canonicalReference": "@groovestack/labs!~MoneyFieldProps:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n    sx?: "
            },
            {
              "kind": "Reference",
              "text": "SxProps",
              "canonicalReference": "@mui/system!SxProps:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/react-admin/money/MoneyField/MoneyField.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ currencySource, roundWhole, displayWhenZero, sourceFormat, ...rest }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "MoneyField"
        },
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!MoneyInput:function(1)",
          "docComment": "/**\n * MoneyInput is a React Admin input that supports editing a currency value.\n *\n * FEATURES - Full Il8n currency support - Mobile friendly numeric input - Currency specified by record or explicity via 'currencySource' prop\n *\n * TODO - Handle 2 and 3 digit currencies with the various source and format options - Refactor to simpler MUI pattern - Throw error if sourceFormat is 'cents' and allowMinorUnits is false and value has cents. This would likely cause the result to truncate the fractional part - Handle whole values on mode - Validate cents transforms mode - Support Negative values\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MoneyInput: ({ currencySource, sourceFormat, allowMinorUnits, "
            },
            {
              "kind": "Reference",
              "text": "record",
              "canonicalReference": "@groovestack/labs!~MoneyInputProps#record"
            },
            {
              "kind": "Content",
              "text": ": recordProp, ...rest }: "
            },
            {
              "kind": "Reference",
              "text": "MoneyInputProps",
              "canonicalReference": "@groovestack/labs!~MoneyInputProps:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/react-admin/money/MoneyInput/MoneyInput.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ currencySource, sourceFormat, allowMinorUnits, record: recordProp, ...rest }",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "MoneyInput"
        },
        {
          "kind": "Function",
          "canonicalReference": "@groovestack/labs!StatusInput:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StatusInput: (props: "
            },
            {
              "kind": "Reference",
              "text": "StatusInputProps",
              "canonicalReference": "@groovestack/labs!~StatusInputProps:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "import(\"react/jsx-runtime\")."
            },
            {
              "kind": "Reference",
              "text": "JSX.Element",
              "canonicalReference": "@types/react!JSX.Element:interface"
            },
            {
              "kind": "Content",
              "text": " | null"
            }
          ],
          "fileUrlPath": "dist/labs/core-labs-fe/src/react-admin/rating/StatusInput/StatusInput.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "props",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "StatusInput"
        }
      ]
    }
  ]
}
